import numpy as np
import math

# 1. Üç noktanın koordinatlarını verilen aralıkta rastgele ata
def initalizeCoordinates(p1, p2, p3):
    for point in (p1, p2, p3):
        point.extend(np.random.randint(7, 16, size=3))

# 2. Normal vektör hesaplama (verilen formülle)
def calculateNormals(p1, p2, p3):
    nx = (p2[1] - p1[1]) * (p3[2] - p1[2]) - (p2[2] - p1[2]) * (p3[1] - p1[1])
    ny = (p2[2] - p1[2]) * (p3[0] - p1[0]) - (p2[0] - p1[0]) * (p3[2] - p1[2])
    nz = (p2[0] - p1[0]) * (p3[1] - p1[1]) - (p2[1] - p1[1]) * (p3[0] - p1[0])
    return [nx, ny, nz]

# 3. Normal vektöre göre açıları hesaplama
def calculateAngles(normal):
    nx, ny, nz = normal
    mag = math.sqrt(nx**2 + ny**2 + nz**2)
    angleX = math.degrees(math.acos(nx / mag))
    angleY = math.degrees(math.acos(ny / mag))
    angleZ = math.degrees(math.acos(nz / mag))
    return [angleX, angleY, angleZ]

# 4. Açı farklarını kontrol et ve yüzeyde olup olmadığını belirle
def isSameSurface(angles, threshold):
    angleX, angleY, angleZ = angles
    return (
        abs(angleX - angleY) < threshold and
        abs(angleX - angleZ) < threshold and
        abs(angleY - angleZ) < threshold
    )

# 5. Ana fonksiyon: tüm işlemleri sırayla çalıştır

def main():
    # Boş noktaları tanımla
    p1, p2, p3 = [], [], []

    # Noktaları başlat
    initalizeCoordinates(p1, p2, p3)

    print("P1:", p1)
    print("P2:", p2)
    print("P3:", p3)

    # Normal vektörü hesapla
    normal = calculateNormals(p1, p2, p3)
    print("Normal Vektör:", normal)

    # Açılar hesapla
    angles = calculateAngles(normal)
    print("Açılar:", angles)

    # Aynı yüzeyde mi kontrol et
    same_surface = isSameSurface(angles, 5)  # Eşik 5 derece
    print("Aynı yüzeyde mi?:", same_surface)

# Programı başlat
main()
